# vim:ft=sh et sw=2 ts=2:

stty icrnl

export EDITOR=vim
export PAGER=less
export MAVEN_OPTS="-Xmx2048m -XX:MaxPermSize=384m"

# Unicodeness. Get an .XCompose & add to .xinitrc: setxkbmap -option "compose:caps"
export XKBOPTIONS="compose:caps"
export GTK_IM_MODULE=xim
export QT_IM_MODULE=xim

alias rm='rm -i' # like a child :(
alias la='ls -la'
alias ll='ls -l'
alias lsa='ls -a'
alias lld='ll --group-directories-first'
alias tree='tree -I target'

#alias svnstnew='svn st --ignore-externals | fgrep ? | cut -b8-'
#alias svnste='svn st --ignore-externals | grep -v ^X'
#alias svn_add_rm="svnste | sort | fgrep '?' | cut -b3- | xargs --no-run-if-empty echo svn add; echo; svnste | sort | fgrep '!' | cut -b3- | xargs --no-run-if-empty echo svn rm"
#alias b=bundle
#alias be='bundle exec'
#alias bgc='bundle exec guard -c'
alias rak='bundle exec rake'
alias vimrc='vim ~/.vimrc'
alias gemdir='pushd "`gem env | fgrep INSTALL | perl -pe "s/^.+?: //"`/gems"'
alias view='vim -R'
alias sharedrc="vim ~/.golly-rc/assets/shell.rc-shared && echo Reloading... && . ~/.$(basename $SHELL)rc"
alias golrc='pushd ~/.golly-rc'
alias ssc='sudo systemctl'
alias mvn="$HOME/.golly-rc/bin/mvnc"
alias code_gsub="$HOME/.golly-rc/bin/code_gsub"
alias killsbt="jps | grep sbt | awk '{print \$1}' | xargs --no-run-if-empty --verbose kill -9"
alias scr='clear && scala -language:_'
alias diffu='colordiff -u'
alias gca='git commit --amend'
alias gcan='git commit --amend --date=now'
alias ww='google-chrome-stable --incognito'
alias WIPE='git wipe; git clean -df'
alias grep='grep --color=auto'
alias fgrep='fgrep --color=auto'
alias egrep='egrep --color=auto'
alias pie='perl -pi -e'
alias mvorig='find . -name "*.orig" -type f -exec mv -v {} /tmp \;'
alias ncdu='ncdu --color dark'
alias vimsbt13='vim ~/.sbt/0.13/{*/,}*.sbt -O'
alias vimsbt10='vim ~/.sbt/1.0/{*/,}*.sbt -O'

alias odx='od -Ax -tx1z'

# MPV
mpv_del_xargs="sort -u /tmp/mpv-deletion | xargs -d '\n'"
alias mpv-del-size="${mpv_del_xargs} du -shc"
alias mpv-del-rm="${mpv_del_xargs} rm -v && rm -i /tmp/mpv-deletion"

# Distro-specific
source "$HOME/.golly-rc/lib/distro.sh"
case "$(distro)" in
  ArchLinux)
    alias ls='ls --color=auto'
    alias p='sudo pacman -S --needed'
    alias y='yay -S --needed'
    alias yy='yay -S --needed --noconfirm'
    alias syu='yaourt -Syu'
    alias syua='yay -Syua'
    alias ql='pacman -Ql'
    function qlx {
      [ $# -ne 1 ] && echo "Package name missing." || (
      pacman -Ql $1 | sed 's/^[^ ]* //' | while read -r f; do [ ! -d "$f" -a -x "$f" ] && printf "$f\n"; done
      );
    }
    ;;
  Ubuntu)
    alias ls='ls --color=auto'
    function show_installed { f="$1"; [ -z "$f" ] && f='.*'; dpkg --get-selections | grep '[^a-zA-Z]install' | egrep "$f" | sed 's/[ \t].*//' | xargs dpkg -s | egrep '^(Package|Version)' | perl -0000 -pe 's/Package: (\S+)\s*[\r\n]+Version: (\S+)/\1 \2 \2/g' | perl -pe 's/ (?:\d+:)?(\S+?)[-+~]\S+$/ \1/; s/ (\S+) (\S+)$/ \2 \1/' | column -t | perl -pe 's/(\S+)(\s+\S+)$/\1    \2/' | sort ; }
    ;;
  OSX)
    export CLICOLOR=1
    export LSCOLORS=gxfxcxdxCxegedabagacad
    ;;
  *)
    echo "Unknown distro: [$(distro)]"
    ;;
esac

# Functions
function WIPEDIR { for f in "$@"; do rm -rf "$f"; git checkout -- "$f"; done ;}
function myip { curl -s http://ifconfig.me ;}
function show_cp { if [ ! -r "$1" ]; then echo "Can't read: $1"; else unzip -p $1 META-INF/MANIFEST.MF | sed '/^Class-Path:/,$!d' | tr -d '\n\r' | perl -pe 's/^.+?: //; s/ //g; s/(?<=\.jar)/\n/g'; fi; }
function test_cp { show_cp "$1" | sed "s|^|$(dirname "$1")/|" | xargs -L1 ls -l; }
function git_pull_all { [ $? -eq 0 ] && set - .; find "$@" -type d -name .git | xargs -L1 -I{} bash -c 'echo "{}"; cd "{}/.." && git pull; echo'; }
function gv2png { [ $# -ne 1 ] && echo "Filename missing." || ( o="$1.png"; dot -Tpng -o"$o" "$1" && xdg-open "$o" 2>/dev/null);}
function s { for a in "$@"; do xdg-open "$a" 2>&1 | fgrep -v WARNING | sed '/^ *$/d'; done ;}
function ss { for a in "$@"; do nohup xdg-open "$a" &>/dev/null ; done ;}
function find_name {
  name="$1"
  shift
  dir=.
  if [ -n "$1" -a -d "$1" ]; then
    dir="$1"
    shift
  fi
  if [ -n "$1" ]; then
    name="*$1$name"
    shift
  fi
  find -L "$dir" "$@" -type f -name "$name" | sort
}
alias finds="find_name '*.scala'"
alias findj="find_name '*.java'"
alias findjs="find_name '*.js'"
function fixspace {
  find "$@" -type f -name '*.scala' -exec perl -pi -e 's/[ \t]+$//' {} +
}
function kvm_on {
  sudo modprobe -r vboxnetflt
  sudo modprobe -r vboxdrv
  sudo modprobe kvm_intel
  lsmod | egrep 'kvm|vbox'
}
function kvm_off {
  sudo modprobe -r kvm_intel
  sudo modprobe -r kvm
  sudo modprobe vboxdrv
  sudo modprobe vboxnetflt
  lsmod | egrep 'kvm|vbox'
}
function vime {
  f="$1"
  if [ -z "$f" ]; then
    echo "USAGE: vime <filename> [<script args>]"
  elif [ ! -x "$f" ]; then
    echo "Not executable: $f"
  else
    shift
    ff="$(dirname "$f")/$(basename "$f")"
    vim "$f" && clear && echo "> $ff $*" && "$ff" "$@"
  fi
}
function mc {
  if [ -z "$1" ]; then
    echo "Directory name required."
  elif [ -e "$1" ]; then
    echo "Dir exists, skipping creation."
    cd "$1"
  else
    mkdir -p "$1" && echo "Dir created."
    cd "$1"
  fi
}
function newscript {
  if [ $# -eq 0 ]; then
    echo "Nothing to do."
  else
    for f in "$@"; do
      if [ -e "$f" ]; then
        echo "Already exists: $f"
      else
        echo "Creating: $f"
        echo '#!/bin/bash
cd "$(dirname "$0")" || exit 1
cd "$(dirname "$(readlink -e "$0")")" || exit 1
[ $# -ne 1 ] && echo "Usage: $0 <xxx>" && exit 1
tmp=/tmp/$(date +%Y%m%d-%H%M%S)-$$
' > "$f" && chmod 755 "$f"
      fi
    done
  fi
}
function crap {
  if [ $# -eq 0 ]; then
    echo "Nothing to do."
  else
    crap=~/crap
    time=$(date +%Y%m%d-%H%M%S)
    for f in "$@"; do
      g="$(basename "$f")"
      name="${g%.*}"
      ext="${g##*.}"
      tgt="$crap/$name-$time.$ext"
      cp -vp "$f" "$tgt"
    done
  fi
}
function mvorig {
  find -name '*.orig' -exec mv -i {} /tmp \;
}
function convss {
  if [ $# -eq 0 ]; then
    echo "No arguments provided." >&2
  else
    out=$(echo ${@:${#@}} | sed 's/^.*://')
    convert "$@" && \
      if [ -e "$out" ]; then
        identify "$out"
        xdg-open "$out"
      else
        echo "File not found: $out" >&2
      fi
  fi
}
function source_if_exists { [ -e "$1" ] && source "$1" ;}

alias vimkeys='vim ~/.XCompose && fkeyd'
function fkey { egrep "$@" ~/.XCompose ;}
function fkeyd {
  grep -v '^ *#' ~/.XCompose | fgrep '<Multi_key>' | sed 's/ *:.*//; s/  */ /; s/^ //' | sort | uniq -d | uniq \
  | sed 's/  */***/g; s/\*\*\*/  */g; s/$/ *:/' | xargs -I{} grep -n {} ~/.XCompose
}

[ -e /usr/lib/jvm/java-8-jdk ] && function java8 {
  export JAVA_HOME=/usr/lib/jvm/java-8-jdk
  export PATH="$JAVA_HOME/bin:$PATH"
  [ "$1" = --quiet ] || java -version
}
[ -e /usr/lib/jvm/java-8-openjdk ] && function java8 {
  export JAVA_HOME=/usr/lib/jvm/java-8-openjdk
  export PATH="$JAVA_HOME/bin:$PATH"
  [ "$1" = --quiet ] || java -version
}
[ -e /usr/lib/jvm/java-9-openjdk ] && function java9 {
  export JAVA_HOME=/usr/lib/jvm/java-9-openjdk
  export PATH="$JAVA_HOME/bin:$PATH"
  [ "$1" = --quiet ] || java -version
}
[ -e /usr/lib/jvm/java-10-openjdk ] && function java10 {
  export JAVA_HOME=/usr/lib/jvm/java-10-openjdk
  export PATH="$JAVA_HOME/bin:$PATH"
  [ "$1" = --quiet ] || java -version
}
[ -e /usr/lib/jvm/java-11-openjdk ] && function java11 {
  export JAVA_HOME=/usr/lib/jvm/java-11-openjdk
  export PATH="$JAVA_HOME/bin:$PATH"
  [ "$1" = --quiet ] || java -version
}
[ -e /usr/lib/jvm/java-8-graal ] && function graal {
  export JAVA_HOME=/usr/lib/jvm/java-8-graal
  export PATH="$JAVA_HOME/bin:$PATH"
  [ "$1" = --quiet ] || java -version
}
[ -e $HOME/Apps/graalvm-ee ] && function graal-ee {
  export JAVA_HOME=$HOME/Apps/graalvm-ee
  export PATH="$JAVA_HOME/bin:$PATH"
  [ "$1" = --quiet ] || java -version
}
which java8 >/dev/null; [ $? -eq 0 ] && java8 --quiet

if [ -e /usr/bin/vendor_perl/ack ]; then
  alias ack="/usr/bin/vendor_perl/ack --ignore-dir={target,_scalate,.bower,node_modules,log,vendor,.idea,.idea_modules} --nogroup --color"
fi
alias ackjs='ack --js'
alias ackj='ack --java'
alias acks='ack --scala'

# Use golly-rc path
export PATH="$PATH:$HOME/.golly-rc/path"

#export GIT_SSL_NO_VERIFY=true
unset RUBYOPT

# Man page colours
export LESS_TERMCAP_md=$'\E[01;31m' # begin bold
export LESS_TERMCAP_us=$'\E[32m' # begin underline
export LESS_TERMCAP_mb=$'\E[01;34m' # begin blinking
export LESS_TERMCAP_so=$'\E[01;33m' # begin standout-mode â€“ info
export LESS_TERMCAP_me=$'\E[0m' # end mode
export LESS_TERMCAP_se=$'\E[0m' # end standout-mode
export LESS_TERMCAP_ue=$'\E[0m' # end underline

# Terminal colours
source "$HOME/.golly-rc/assets/.term_colors"

# RVM
if [ -s "$HOME/.rvm/scripts/rvm" ]; then
  source "$HOME/.rvm/scripts/rvm"
  #export PATH="$HOME/.rvm/bin:$PATH"
# RBENV
elif [ -e "$HOME/.rbenv/bin" ]; then
  export PATH="$HOME/.rbenv/bin:$PATH"
  eval "$(rbenv init -)"
fi

# Android
if [ -d /opt/android-sdk ]; then
  export ANDROID_HOME=/opt/android-sdk
  export PATH="$PATH:$ANDROID_HOME/tools"
fi

# Haskell Cabal
[ -d $HOME/.cabal/bin ] && export PATH="$HOME/.cabal/bin:$PATH"

# Haskell Stack
type stack >/dev/null 2>&1 && eval "$(stack --bash-completion-script "$(which stack)")"

# Load local shared settings
export LOCALRC="$HOME/.localrc"
alias localrc="vim "'"'"$LOCALRC"'"'" && echo Reloading... && . "'"'"$LOCALRC"'"'
[ -f "$LOCALRC" ] && source "$LOCALRC"

# Display directory & cmd in terminal title bar
if [ -n "$GUAKE" ]; then
  precmd () { print -Pn "\e]0;%3~\a" ;}
  preexec() { print -Pn "\e]0;$1 [%3~]\a" ;}
  preexec() { print -Pn "\e]0;[%3~] $1\a" ;}
  export TERM=gnome-256color
else
  case "$TERM" in
    rxvt|*term|gnome*)
      # %m = machine, %~ = pwd
      precmd () { print -Pn "\e]0;%m:%~\a" ;}
      preexec() { print -Pn "\e]0;$1 [%m:%~]\a" ;}
    ;;
  esac
fi

# NVM
if [ -f /usr/share/nvm/init-nvm.sh ]; then
  source /usr/share/nvm/init-nvm.sh
fi

# Node.JS
# https://gist.github.com/japgolly/775314a0cb24e33653b059b8f8540250
which npm &>/dev/null
if [ $? -eq 0 ]; then
  export NODE_PATH="$(npm config get prefix)"/lib/node_modules
  export PATH="$PATH:$(npm config get prefix)/bin"
  export npm_config_jobs=7
fi

# Bloop
if [ -d $HOME/.bloop ]; then
  export PATH="$HOME/.bloop:$PATH"
  function bloopctl { systemctl --user "$@" bloop ;}
fi

# fzf
alias pp="fzf --preview 'bat --color always {}'"
export FZF_DEFAULT_COMMAND='fd --type f --hidden --follow --exclude .git'
export FZF_CTRL_T_COMMAND="$FZF_DEFAULT_COMMAND"
export FZF_DEFAULT_OPTS="$FZF_DEFAULT_OPTS --bind='ctrl-b:execute(bat --color always {})+abort'"
export FZF_DEFAULT_OPTS="$FZF_DEFAULT_OPTS --bind='ctrl-v:execute(vimcat {})+abort'"

# Dir aliases
[ -e "$HOME/projects/others"  ] && export others="$HOME/projects/others"  && alias others="cd '$others'"
[ -e "$HOME/projects/forks"   ] && export  forks="$HOME/projects/forks"   && alias  forks="cd '$forks'"
[ -e "$HOME/projects/public"  ] && export    pub="$HOME/projects/public"  && alias    pub="cd '$pub'"
[ -e "$HOME/projects/private" ] && export    pri="$HOME/projects/private" && alias    pri="cd '$pri'"
[ -e "$pub/scalajs-react"     ] && export    sjr="$pub/scalajs-react"     && alias    sjr="cd '$sjr'"
[ -e "$pub/scala-graal"       ] && export     sg="$pub/scala-graal"       && alias     sg="cd '$sg'"
[ -e "$pub/test-state"        ] && export     ts="$pub/test-state"        && alias     ts="cd '$ts'"
