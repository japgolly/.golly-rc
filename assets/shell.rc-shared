# vim:ft=sh et sw=2 ts=2:

if [ -e /etc/profile ]; then
  unset PATH
  source /etc/profile
fi

stty icrnl

export EDITOR=vim
export PAGER=less
export MAVEN_OPTS="-Xmx2048m -XX:MaxPermSize=384m"

export DOCKER_BUILDKIT=1

# Unicodeness. Get an .XCompose & add to .xinitrc: setxkbmap -option "compose:caps"
export XKBOPTIONS="compose:caps"
export GTK_IM_MODULE=xim
export QT_IM_MODULE=xim

alias rm='rm -i' # like a child :(
alias la='ls -la'
alias ll='ls -l'
alias lsa='ls -a'
alias lld='ll --group-directories-first'
alias tree='tree -I target'

alias vimrc='vim ~/.vimrc'
alias view='vim -R'
alias sharedrc="vim ~/.golly-rc/assets/shell.rc-shared && echo Reloading... && . ~/.$(basename $SHELL)rc"
alias golrc='pushd ~/.golly-rc'
alias ssc='sudo systemctl'
alias mvn="$HOME/.golly-rc/bin/mvnc"
alias killsbt="jps | egrep 'sbt|org.eclipse.lemminx.XMLServerLauncher' | awk '{print \$1}' | xargs --no-run-if-empty --verbose kill -9"
alias sbtk='killsbt; sbt'
alias killidea="jps | egrep 'intellij|jetbrains' | awk '{print \$1}' | xargs --no-run-if-empty --verbose kill -9"
alias diffu='colordiff -u'
alias g=lazygit
alias gc='git commit'
alias gs='git st'
alias gcm='git commit -m'
alias gca='git commit --amend'
alias gcan='git commit --amend --date=now'
alias gsa='git add -A && git stash save'
alias ww='google-chrome-stable --incognito'
alias WIPE='git wipe; git clean -df'
alias grep='grep --color=auto'
alias fgrep='fgrep --color=auto'
alias egrep='egrep --color=auto'
alias ip='ip -color=auto'
alias pie='perl -pi -e'
alias mvorig='find . -name "*.orig" -type f -exec mv -v {} /tmp \;'
alias ncdu='ncdu --color dark'
alias vimsbt='vim ~/.sbt/1.0/{*/,}*.sbt -o'
alias odx='od -Ax -tx1z'
alias awk1='awk '"'"'{print $1}'"'"
alias awk2='awk '"'"'{print $2}'"'"
alias cs=coursier
alias rg='/usr/bin/rg -M 200'
alias rgj='rg -t js -t ts'
alias rgs='rg -t scala'
alias m=make

# MPV
mpv_del_xargs="sort -u /tmp/mpv-deletion | xargs -d '\n'"
alias mpv-del-size="${mpv_del_xargs} du -shc"
alias mpv-del-rm="${mpv_del_xargs} rm -v && rm -i /tmp/mpv-deletion"

# Distro-specific
source "$HOME/.golly-rc/lib/distro.sh"
case "$(distro)" in
  ArchLinux)
    alias ls='ls --color=auto'
    alias p='sudo pacman -S --needed'
    alias y='yay -S --needed'
    alias yy='yay -S --needed --noconfirm'
    alias syu='yaourt -Syu'
    alias syua='yay -Syua'
    alias ql='pacman -Ql'
    function qlx {
      [ $# -ne 1 ] && echo "Package name missing." || (
      pacman -Ql $1 | sed 's/^[^ ]* //' | while read -r f; do [ ! -d "$f" -a -x "$f" ] && printf "$f\n"; done
      );
    }
    ;;
  Ubuntu)
    alias ls='ls --color=auto'
    function show_installed { f="$1"; [ -z "$f" ] && f='.*'; dpkg --get-selections | grep '[^a-zA-Z]install' | egrep "$f" | sed 's/[ \t].*//' | xargs dpkg -s | egrep '^(Package|Version)' | perl -0000 -pe 's/Package: (\S+)\s*[\r\n]+Version: (\S+)/\1 \2 \2/g' | perl -pe 's/ (?:\d+:)?(\S+?)[-+~]\S+$/ \1/; s/ (\S+) (\S+)$/ \2 \1/' | column -t | perl -pe 's/(\S+)(\s+\S+)$/\1    \2/' | sort ; }
    ;;
  OSX)
    export CLICOLOR=1
    export LSCOLORS=gxfxcxdxCxegedabagacad
    ;;
  *)
    echo "Unknown distro: [$(distro)]"
    ;;
esac

# Functions
function WIPEDIR { for f in "$@"; do rm -rf "$f"; git checkout -- "$f"; done ;}
function myip { curl -s http://ifconfig.me ;}
function show_cp { if [ ! -r "$1" ]; then echo "Can't read: $1"; else unzip -p $1 META-INF/MANIFEST.MF | sed '/^Class-Path:/,$!d' | tr -d '\n\r' | perl -pe 's/^.+?: //; s/ //g; s/(?<=\.jar)/\n/g'; fi; }
function test_cp { show_cp "$1" | sed "s|^|$(dirname "$1")/|" | xargs -L1 ls -l; }
function git_pull_all { [ $? -eq 0 ] && set - .; find "$@" -type d -name .git | xargs -L1 -I{} bash -c 'echo "{}"; cd "{}/.." && git pull; echo'; }
function gv2png { [ $# -ne 1 ] && echo "Filename missing." || ( o="$1.png"; dot -Tpng -o"$o" "$1" && xdg-open "$o" 2>/dev/null);}
function s { for a in "$@"; do xdg-open "$a" 2>&1 | fgrep -v WARNING | sed '/^ *$/d'; done ;}
function open { for a in "$@"; do nohup xdg-open "$a" &>/dev/null ; done ;}
function git-tagver { [ $# -ne 1 ] && echo "git-tagver <version>" || git tag -s v"$1" -m v"$1" ;}
function grepsel {
  flags=
  if [ $# -eq 3 ]; then
    flags="$1"
    shift
  fi
  if [ $# -ne 2 ]; then
    echo "grepsel [<grep flags>] <regex> <column>"
    exit 1
  fi
  grep $flags "$1" | awk '{ print $'"$2"' }'
}
function find_name {
  name="$1"
  shift
  dir=.
  if [ -n "$1" -a -d "$1" ]; then
    dir="$1"
    shift
  fi
  if [ -n "$1" ]; then
    name="*$1$name"
    shift
  fi
  find -L "$dir" "$@" -type f -name "$name" | sort
}
alias finds="find_name '*.scala'"
alias findj="find_name '*.java'"
alias findjs="find_name '*.js'"
function gsp {
  if [[ "$1" =~ '^[0-9][0-9]*$' ]]; then
    a="$1"
    shift
    git stash pop "stash@{$a}" "$@"
  else
    git stash pop "$@"
  fi
  [ $? -eq 0 ] && git unstage
}
function gss {
  if [[ "$1" =~ '^[0-9][0-9]*$' ]]; then
    a="$1"
    shift
    git stash show "stash@{$a}" "$@"
  else
    git stash show "$@"
  fi
}
function gsd {
  if [[ "$1" =~ '^[0-9][0-9]*$' ]]; then
    a="$1"
    shift
    git stash drop "stash@{$a}" "$@"
  else
    git stash drop "$@"
  fi
}
function fixspace {
  find "$@" -type f -name '*.scala' -exec perl -pi -e 's/\t/  /g; s/ +$//' {} +
}
function vime {
  f="$1"
  if [ -z "$f" ]; then
    echo "USAGE: vime <filename> [<script args>]"
  elif [ ! -x "$f" ]; then
    echo "Not executable: $f"
  else
    shift
    ff="$(dirname "$f")/$(basename "$f")"
    vim "$f" && clear && echo "> $ff $*" && "$ff" "$@"
  fi
}
function mc {
  if [ -z "$1" ]; then
    echo "Directory name required."
  elif [ -e "$1" ]; then
    echo "Dir exists, skipping creation."
    cd "$1"
  else
    mkdir -p "$1" && echo "Dir created."
    cd "$1"
  fi
}
function newscript {
  if [ $# -eq 0 ]; then
    echo "Nothing to do."
  else
    for f in "$@"; do
      if [ -e "$f" ]; then
        echo "Already exists: $f"
      else
        echo "Creating: $f"
        echo '#!/bin/bash
set -euo pipefail
cd "$(dirname "$0")" || exit 1
cd "$(dirname "$(readlink -e "$0")")" || exit 1
[ $# -ne 1 ] && echo "Usage: $0 <xxx>" && exit 1
tmp=/tmp/$(date +%Y%m%d-%H%M%S)-$$
' > "$f" && chmod 755 "$f"
      fi
    done
  fi
}
function crap {
  crap=~/crap
  if [ $# -eq 0 ]; then
    ls -lrt "$crap"
  else
    time=$(date +%Y%m%d-%H%M%S)
    for f in "$@"; do
      g="$(basename "$f")"
      name="${g%.*}"
      ext="${g##*.}"
      tgt="$crap/$name-$time.$ext"
      cp -vp "$f" "$tgt"
    done
  fi
}
function mvcrap {
  crap=~/crap
  if [ $# -eq 0 ]; then
    ls -lrt "$crap"
  else
    time=$(date +%Y%m%d-%H%M%S)
    for f in "$@"; do
      g="$(basename "$f")"
      name="${g%.*}"
      ext="${g##*.}"
      tgt="$crap/$name-$time.$ext"
      mv -v "$f" "$tgt"
    done
  fi
}
function gitignore {
  [ $# -eq 0 ] && echo "No arguments provided." >&2 && exit 1
  for f in "$@"; do echo "$f" >> .gitignore; done
  git add .gitignore && git commit -m "Ignore $@" -- .gitignore
}
function mvorig {
  find -name '*.orig' -exec mv -i {} /tmp \;
}
function convss {
  if [ $# -eq 0 ]; then
    echo "No arguments provided." >&2
  else
    out=$(echo ${@:${#@}} | sed 's/^.*://')
    convert "$@" && \
      if [ -e "$out" ]; then
        identify "$out"
        xdg-open "$out"
      else
        echo "File not found: $out" >&2
      fi
  fi
}
function source_if_exists { [ -e "$1" ] && source "$1" ;}
function tf {
  clear
  cmd=(terraform)
  if [ $# -eq 0 ]; then
    cmd+=(apply)
  else
    cmd+=("$@")
  fi
  cmd+=($TERRAFORM_ARGS)
  "${cmd[@]}"
}
alias tfd='TF_LOG=DEBUG tf'
function jqless {
  tmp=/tmp/jqless.json
  args=(-C -S)
  if [ $# -eq 0 ]; then
    args+=(.)
  else
    args+=("$@")
  fi
  tee $tmp | jq "${args[@]}" | less -SR
}

alias vimkeys='vim ~/.XCompose && fkeyd'
function fkey { egrep "$@" ~/.XCompose ;}
function fkeyd {
  grep -v '^ *#' ~/.XCompose | fgrep '<Multi_key>' | sed 's/ *:.*//; s/  */ /; s/^ //' | sort | uniq -d | uniq \
  | sed 's/  */***/g; s/\*\*\*/  */g; s/$/ *:/' | xargs -I{} grep -n {} ~/.XCompose
}

function gitc {
  nohup git-cola >/dev/null 2>/dev/null &
}

[ -e /usr/lib/jvm/java-8-jdk ] && function java8 {
  export JAVA_HOME=/usr/lib/jvm/java-8-jdk
  export PATH="$JAVA_HOME/bin:$PATH"
  [ "$1" = --quiet ] || java -version
}
[ -e /usr/lib/jvm/java-8-openjdk ] && function java8 {
  export JAVA_HOME=/usr/lib/jvm/java-8-openjdk
  export PATH="$JAVA_HOME/bin:$PATH"
  [ "$1" = --quiet ] || java -version
}
[ -e /usr/lib/jvm/java-9-openjdk ] && function java9 {
  export JAVA_HOME=/usr/lib/jvm/java-9-openjdk
  export PATH="$JAVA_HOME/bin:$PATH"
  [ "$1" = --quiet ] || java -version
}
[ -e /usr/lib/jvm/java-10-openjdk ] && function java10 {
  export JAVA_HOME=/usr/lib/jvm/java-10-openjdk
  export PATH="$JAVA_HOME/bin:$PATH"
  [ "$1" = --quiet ] || java -version
}
[ -e /usr/lib/jvm/java-11-openjdk ] && function java11 {
  export JAVA_HOME=/usr/lib/jvm/java-11-openjdk
  export PATH="$JAVA_HOME/bin:$PATH"
  [ "$1" = --quiet ] || java -version
}
[ -e /usr/lib/jvm/java-8-graal ] && function graal {
  export JAVA_HOME=/usr/lib/jvm/java-8-graal
  export PATH="$JAVA_HOME/bin:$PATH"
  export PATH="/usr/bin:$PATH" # No I don't want to use Graal node by default
  [ "$1" = --quiet ] || java -version
}
[ -e /usr/lib/jvm/java-11-graalvm ] && function graal11 {
  export JAVA_HOME=/usr/lib/jvm/java-11-graalvm
  export PATH="$JAVA_HOME/bin:$PATH"
  export PATH="/usr/bin:$PATH" # No I don't want to use Graal node by default
  [ "$1" = --quiet ] || java -version
}
[ -e $HOME/Apps/graalvm-ee ] && function graal-ee {
  export JAVA_HOME=$HOME/Apps/graalvm-ee
  export PATH="$JAVA_HOME/bin:$PATH"
  [ "$1" = --quiet ] || java -version
}
which graal11 >/dev/null 2>&1; if [ $? -eq 0 ]; then
  graal11 --quiet
else
  which java8 >/dev/null 2>&1; [ $? -eq 0 ] && java8 --quiet
fi

if [ -e /usr/bin/vendor_perl/ack ]; then
  alias ack="/usr/bin/vendor_perl/ack --ignore-dir={target,_scalate,.bower,node_modules,log,vendor,.idea,.idea_modules} --color"
fi

# Use golly-rc path
export PATH="$PATH:$HOME/.golly-rc/path"

# Python and whatever
export PATH="$PATH:$HOME/.local/bin"

#export GIT_SSL_NO_VERIFY=true
unset RUBYOPT

# Man page colours
export LESS_TERMCAP_md=$'\E[01;31m' # begin bold
export LESS_TERMCAP_us=$'\E[32m' # begin underline
export LESS_TERMCAP_mb=$'\E[01;34m' # begin blinking
export LESS_TERMCAP_so=$'\E[01;33m' # begin standout-mode – info
export LESS_TERMCAP_me=$'\E[0m' # end mode
export LESS_TERMCAP_se=$'\E[0m' # end standout-mode
export LESS_TERMCAP_ue=$'\E[0m' # end underline

# Terminal colours
source "$HOME/.golly-rc/assets/.term_colors"

# RVM
if [ -s "$HOME/.rvm/scripts/rvm" ]; then
  source "$HOME/.rvm/scripts/rvm"
  #export PATH="$HOME/.rvm/bin:$PATH"
# RBENV
elif [ -e "$HOME/.rbenv/bin" ]; then
  export PATH="$HOME/.rbenv/bin:$PATH"
  eval "$(rbenv init -)"
fi

# Android
if [ -d /opt/android-sdk ]; then
  export ANDROID_HOME=/opt/android-sdk
  export PATH="$PATH:$ANDROID_HOME/tools"
fi

# Haskell Cabal
[ -d $HOME/.cabal/bin ] && export PATH="$HOME/.cabal/bin:$PATH"

# Load local shared settings
export LOCALRC="$HOME/.localrc"
alias localrc="vim "'"'"$LOCALRC"'"'" && echo Reloading... && . "'"'"$LOCALRC"'"'
[ -f "$LOCALRC" ] && source "$LOCALRC"

# Display directory & cmd in terminal title bar
# %3~ = pwd.takeRight(3)
# %m = machine, %~ = pwd
case "$TERM" in
  rxvt|*term|gnome*)
    precmd () { print -Pn "\e]0;%3~\a" ;}
    preexec() { print -Pn "\e]0;$1 [%1~]\a" ;}
  ;;
esac

# NVM
if [ -f /usr/share/nvm/init-nvm.sh ]; then
  source /usr/share/nvm/init-nvm.sh
fi

# Node.JS
# https://gist.github.com/japgolly/775314a0cb24e33653b059b8f8540250
which npm &>/dev/null
if [ $? -eq 0 ]; then
  export NODE_PATH="$(npm config get prefix)"/lib/node_modules
  export PATH="$PATH:$(npm config get prefix)/bin"
  export npm_config_jobs=7
fi
export PATH="$PATH:$HOME/.npm/bin"

# Bloop
export PATH="$PATH:$HOME/.local/share/coursier/bin"
function bloopctl { systemctl --user "$@" bloop ;}

# fzf
alias pp="fzf --preview 'bat --color always {}'"
export FZF_DEFAULT_COMMAND='fd --type f --hidden --follow --exclude .git'
export FZF_CTRL_T_COMMAND="$FZF_DEFAULT_COMMAND"
export FZF_DEFAULT_OPTS="$FZF_DEFAULT_OPTS --bind='ctrl-b:execute(bat --color always {})+abort'"
export FZF_DEFAULT_OPTS="$FZF_DEFAULT_OPTS --bind='ctrl-v:execute(vimcat {})+abort'"

# Dir aliases
[ -e "$HOME/projects/others"  ] && export others="$HOME/projects/others"  && alias others="cd '$others'"
[ -e "$HOME/projects/forks"   ] && export  forks="$HOME/projects/forks"   && alias  forks="cd '$forks'"
[ -e "$HOME/projects/public"  ] && export    pub="$HOME/projects/public"  && alias    pub="cd '$pub'"
[ -e "$HOME/projects/private" ] && export    pri="$HOME/projects/private" && alias    pri="cd '$pri'"
[ -e "$pub/scalajs-benchmark" ] && export    sjb="$pub/scalajs-benchmark" && alias    sjb="cd '$sjb'"
[ -e "$pub/scalajs-react"     ] && export    sjr="$pub/scalajs-react"     && alias    sjr="cd '$sjr'"
[ -e "$pub/scala-graal"       ] && export     sg="$pub/scala-graal"       && alias     sg="cd '$sg'"
[ -e "$pub/test-state"        ] && export     ts="$pub/test-state"        && alias     ts="cd '$ts'"
[ -e "$pub/mr.boilerplate"    ] && export    mrb="$pub/mr.boilerplate"    && alias    mrb="cd '$mrb'"
